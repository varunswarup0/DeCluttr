diff --git a/node_modules/expo-audio/android/src/main/java/expo/modules/audio/AudioModule.kt b/node_modules/expo-audio/android/src/main/java/expo/modules/audio/AudioModule.kt
index c4a55da..fd35485 100644
--- a/node_modules/expo-audio/android/src/main/java/expo/modules/audio/AudioModule.kt
+++ b/node_modules/expo-audio/android/src/main/java/expo/modules/audio/AudioModule.kt
@@ -39,6 +39,9 @@ import kotlinx.coroutines.runBlocking
 import okhttp3.OkHttpClient
 import java.io.File
 import java.util.concurrent.ConcurrentHashMap
+import android.os.Handler
+import android.os.Looper
+import java.util.concurrent.CountDownLatch
 import kotlin.math.min
 
 @androidx.annotation.OptIn(androidx.media3.common.util.UnstableApi::class)
@@ -63,7 +66,7 @@ class AudioModule : Module() {
         AudioManager.AUDIOFOCUS_LOSS -> {
           focusAcquired = false
           players.values.forEach { player ->
-            player.ref.pause()
+            runOnMain { player.ref.pause() }
           }
         }
 
@@ -72,7 +75,7 @@ class AudioModule : Module() {
           players.values.forEach { player ->
             if (player.ref.isPlaying) {
               player.isPaused = true
-              player.ref.pause()
+              runOnMain { player.ref.pause() }
             }
           }
         }
@@ -80,7 +83,7 @@ class AudioModule : Module() {
         AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK -> {
           if (interruptionMode == InterruptionMode.DUCK_OTHERS) {
             players.values.forEach { player ->
-              player.ref.volume /= 2f
+              runOnMain { player.ref.volume /= 2f }
             }
           } else {
             players.values.forEach { player ->
@@ -95,7 +98,7 @@ class AudioModule : Module() {
         AudioManager.AUDIOFOCUS_GAIN -> {
           focusAcquired = true
           players.values.forEach { player ->
-            player.setVolume(player.previousVolume)
+            runOnMain { player.setVolume(player.previousVolume) }
             if (player.isPaused) {
               player.isPaused = false
               player.ref.play()
@@ -180,7 +183,7 @@ class AudioModule : Module() {
         runOnMain {
           players.values.forEach {
             if (it.ref.isPlaying) {
-              it.ref.pause()
+              runOnMain { it.ref.pause() }
             }
           }
         }
@@ -201,7 +204,7 @@ class AudioModule : Module() {
         players.values.forEach { player ->
           if (player.ref.isPlaying) {
             player.isPaused = true
-            player.ref.pause()
+            runOnMain { player.ref.pause() }
           }
         }
 
@@ -219,7 +222,7 @@ class AudioModule : Module() {
         players.values.forEach { player ->
           if (player.isPaused) {
             player.isPaused = false
-            player.ref.play()
+            runOnMain { player.ref.play() }
           }
         }
 
@@ -239,7 +242,7 @@ class AudioModule : Module() {
       appContext.mainQueue.launch {
         releaseAudioFocus()
         players.values.forEach {
-          it.ref.stop()
+          runOnMain { it.player.stop() }
         }
 
         recorders.values.forEach {
@@ -551,8 +554,23 @@ class AudioModule : Module() {
     }.createMediaSource(mediaItem)
   }
 
-  private fun <T> runOnMain(block: () -> T): T =
-    runBlocking(appContext.mainQueue.coroutineContext) { block() }
+  private fun <T> runOnMain(block: () -> T): T {
+    if (Looper.myLooper() == Looper.getMainLooper()) {
+      return block()
+    }
+    var result: T? = null
+    val latch = CountDownLatch(1)
+    Handler(Looper.getMainLooper()).post {
+      try {
+        result = block()
+      } finally {
+        latch.countDown()
+      }
+    }
+    latch.await()
+    @Suppress("UNCHECKED_CAST")
+    return result as T
+  }
 
   private fun checkRecordingPermission() {
     val permission = ContextCompat.checkSelfPermission(appContext.throwingActivity.applicationContext, Manifest.permission.RECORD_AUDIO)
